generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Child {
  id                  String                    @id
  parentId            String?                   @map("parent_id")
  schoolId            String?                   @map("school_id")
  fullName            String
  displayName         String?
  dateOfBirth         DateTime?
  gender              String?
  profilePictureUrl   String?
  grade               String?
  motherTongue        String?
  learningPreferences Json?
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt
  isPaymentAuthorized Boolean?                  @default(false)
  parent              Parent?                   @relation(fields: [parentId], references: [id], onDelete: Cascade)
  school              School?                   @relation(fields: [schoolId], references: [id])
  credentials         ChildCredential?
  relationships       ParentChildRelationship[]
  schoolAccount       SchoolChildAccount?
}

model Parent {
  id            String                    @id
  email         String?                   @unique
  accountStatus String                    @default("active") @db.VarChar(20)
  firebaseUid   String?                   @unique
  phoneNumber   String?                   @unique
  phoneVerified Boolean                   @default(false)
  passwordHash  String?
  pinHash       String?
  lastLogin     DateTime?
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
  children      Child[]
  authMethods   ParentAuthMethod[]
  relationships ParentChildRelationship[]
  profile       ParentProfile?
}

model ParentProfile {
  parentId          String   @id @unique @map("parent_id")
  firstName         String   @db.VarChar(100)
  lastName          String?
  preferredLanguage String   @default("en")
  profilePictureUrl String?
  timezone          String   @default("UTC")
  updatedAt         DateTime @updatedAt
  parent            Parent   @relation(fields: [parentId], references: [id], onDelete: Cascade)
}

model ParentChildRelationship {
  parentId         String   @map("parent_id")
  childId          String   @map("child_id")
  relationshipType String   @default("parent") @db.VarChar(50)
  isPrimary        Boolean  @default(false)
  canManage        Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  child            Child    @relation(fields: [childId], references: [id], onDelete: Cascade)
  parent           Parent   @relation(fields: [parentId], references: [id], onDelete: Cascade)

  @@id([parentId, childId])
}

model ParentAuthMethod {
  id         String   @id
  parentId   String
  methodType String   @db.VarChar(50)
  providerId String?
  isVerified Boolean  @default(false)
  isPrimary  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  parent     Parent   @relation(fields: [parentId], references: [id], onDelete: Cascade)

  @@unique([parentId, methodType, providerId])
}

model AuthSession {
  id               String   @id
  userId           String
  userType         String   @db.VarChar(10)
  deviceId         String?
  deviceName       String?
  ipAddress        String?
  userAgent        String?
  accessTokenHash  String
  refreshTokenHash String
  expiresAt        DateTime
  revoked          Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model OtpVerification {
  id             String   @id
  phoneNumber    String   @unique
  email          String?
  otpCode        String   @db.VarChar(10)
  purpose        String   @db.VarChar(50)
  userType       String?  @db.VarChar(10)
  intendedUserId String?
  expiresAt      DateTime
  verified       Boolean  @default(false)
  createdAt      DateTime @default(now())
}

model ChildCredential {
  childId      String   @id @map("child_id")
  username     String   @unique
  passwordHash String
  createdBy    String?
  createdAt    DateTime @default(now())
  lastUpdated  DateTime @updatedAt
  child        Child    @relation(fields: [childId], references: [id], onDelete: Cascade)
}

model SchoolChildAccount {
  childId         String   @id @map("child_id")
  schoolId        String
  groupId         String?
  username        String   @unique
  initialPassword String
  passwordChanged Boolean  @default(false)
  accountStatus   String   @default("active") @db.VarChar(20)
  createdBy       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  child           Child    @relation(fields: [childId], references: [id], onDelete: Cascade)
  school          School   @relation(fields: [schoolId], references: [id])
}

model School {
  id        String               @id
  name      String
  address   String?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  children  Child[]
  accounts  SchoolChildAccount[]
}
